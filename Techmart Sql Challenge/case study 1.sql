
-- Create the 'categories' table
CREATE TABLE categories (
  category_id INT PRIMARY KEY,
  category_name VARCHAR(50)
);

-- Insert data into the 'categories' table
INSERT INTO categories (category_id, category_name) VALUES
(1, 'Laptops'),
(2, 'Smartphones'),
(3, 'Tablets'),
(4, 'Accessories'),
(5, 'Cameras');

-- Create the 'products' table
CREATE TABLE products (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(100),
  category_id INT,
  unit_price DECIMAL(10, 2),
  stock_quantity INT
);

-- Insert data into the 'products' table
INSERT INTO products (product_id, product_name, category_id, unit_price, stock_quantity) VALUES
(101, 'Dell XPS 13', 1, 1200.00, 50),
(102, 'iPhone 12', 2, 999.99, 100),
(103, 'Samsung Galaxy S21', 2, 899.00, 80),
(104, 'iPad Pro', 3, 799.00, 60),
(105, 'Logitech Wireless Mouse', 4, 29.99, 200),
(106, 'JBL Bluetooth Speaker', 4, 89.99, 150),
(107, 'Nikon D850 DSLR Camera', 5, 2499.00, 30),
(108, 'Sony Alpha A7 III', 5, 1999.00, 40);

-- Create the 'orders' table
CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  customer_id INT,
  order_date DATE
);

-- Insert data into the 'orders' table
INSERT INTO orders (order_id, customer_id, order_date) VALUES
(1001, 5001, '2023-07-01'),
(1002, 5002, '2023-07-15'),
(1003, 5001, '2023-07-20'),
(1004, 5003, '2023-07-22'),
(1005, 5004, '2023-07-25');

-- Create the 'order_items' table
CREATE TABLE order_items (
  order_item_id INT PRIMARY KEY,
  order_id INT,
  product_id INT,
  quantity INT,
  total_price DECIMAL(10, 2)
);

-- Insert data into the 'order_items' table
INSERT INTO order_items (order_item_id, order_id, product_id, quantity, total_price) VALUES
(2001, 1001, 101, 2, 2400.00),
(2002, 1001, 102, 1, 999.99),
(2003, 1002, 104, 3, 2397.00),
(2004, 1003, 103, 2, 1798.00),
(2005, 1003, 105, 5, 149.95),
(2006, 1003, 106, 2, 179.98),
(2007, 1004, 107, 1, 2499.00),
(2008, 1004, 106, 3, 269.97),
(2009, 1005, 102, 2, 1999.98),
(2010, 1005, 108, 1, 1999.00),
(2011, 1005, 105, 2, 59.98),
(2012, 1005, 103, 1, 899.00);


'1. Write a SQL query to retrieve the product_id, product_name, unit_price, and stock_quantity for all products in the "Laptops" category.'
select product_id, product_name, unit_price,stock_quantity from products where category_id='1';

'2. Write a SQL query to determine the top 3 product categories based on the total quantity of products sold.
The result should include the category_id, category_name, and the total quantity sold across all orders.'
SELECT
    categories.category_id,
    categories.category_name,
    SUM(order_items.quantity) AS total_quantity_sold
FROM
    categories
INNER JOIN
    products ON categories.category_id = products.category_id
INNER JOIN
    order_items ON products.product_id = order_items.product_id
GROUP BY
    categories.category_id, categories.category_name
ORDER BY
    total_quantity_sold DESC
LIMIT 3;

'3. Customer Purchase History: (Medium)**
Write a SQL query that shows the order_id, order_date, product_id, product_name, and quantity for each product purchased by a specific customer with customer_id = 1001.'
SELECT
    orders.order_id,
    orders.order_date,
    order_items.product_id,
    products.product_name,
    order_items.quantity
FROM
    orders
INNER JOIN
    order_items ON orders.order_id = order_items.order_id
INNER JOIN
    products ON order_items.product_id = products.product_id
WHERE
    orders.order_id = 1001;

'4. Revenue by Category: (Advanced)**
Write a SQL query to calculate the total revenue generated by each product category, considering the unit price and quantity sold for
 each product. The result should display the category_id, category_name, and total revenue.'

select
categories.category_id,
categories.category_name,
sum(products.unit_price * order_items.quantity) as total_revenue
FROM
    categories
INNER JOIN
    products ON categories.category_id = products.category_id
INNER JOIN
    order_items ON products.product_id = order_items.product_id
GROUP BY
    categories.category_id, categories.category_name;


'**5. Monthly Sales Growth: (Advanced)**
Write an SQL query to calculate the monthly sales growth percentage for TechMart.
The result should include the month and year of the orders and the corresponding sales growth percentage compared to the previous month.'

SELECT
    month_year,
    (total_price - LAG(total_price) OVER (ORDER BY month_year)) / LAG(total_price) OVER (ORDER BY month_year) * 100 AS sales_growth_percentage
FROM (
    SELECT
        DATE_FORMAT(order_date, '%Y-%m') AS month_year,
        SUM(order_items.total_price) AS total_price
    FROM
        orders
        JOIN order_items ON orders.order_id = order_items.order_id
        JOIN products ON order_items.product_id = products.product_id
GROUP BY
        month_year
) AS monthly_totals
ORDER BY
    month_year;

'**6. Rank Customers by Total Spending: (Advanced)**
Write a SQL query to rank TechMarts customers based on their total spending (sum of total_price) in descending order. 
The result should display the customer_id and their respective rank.'
SELECT
    customer_id,
    RANK() OVER (ORDER BY SUM(total_price) DESC) AS customer_rank
FROM
    orders
INNER JOIN
    order_items ON orders.order_id = order_items.order_id
GROUP BY
    customer_id;

'*7. Product Recommendations: (Advanced)**
Write a SQL query that suggests three product recommendations to customers who have purchased products in the "Smartphones" category.
 The recommendations should be based on the purchasing history of other customers who bought products from the same category.'
  SELECT
        orders.customer_id,
        products.product_id
    FROM
        orders 
    INNER JOIN
        order_items  ON orders.order_id = order_items.order_id
    INNER JOIN
        products  ON order_items.product_id = products.product_id
    WHERE
        products.category_id = '2'
GROUP BY
    orders.customer_id, products.product_id, order_items.product_id
ORDER BY
    orders.customer_id
LIMIT 3;

'8.Write a SQL query to fetch category_id, category_name, product_id, product_name for rows with highest total_price for each category'

WITH RankedProducts AS (
  SELECT 
    p.product_id,
    p.product_name,
    p.category_id,
    c.category_name,
    oi.total_price,
    ROW_NUMBER() OVER(PARTITION BY p.category_id ORDER BY oi.total_price DESC) AS rown
  FROM 
    order_items oi
  JOIN 
    products p ON oi.product_id = p.product_id
  JOIN 
    categories c ON p.category_id = c.category_id
)
SELECT 
  product_id,
  product_name,
  category_id,
  category_name,
  total_price
FROM 
  RankedProducts
WHERE 
  rown = 1;

9. order_id, order_date and order date of previous order.
select order_id, order_date, LAG(order_date) OVER (ORDER BY order_date)  AS previous_order_date from orders ;

10. All the rows from the order_items table where the percentage of the price for that product kind is at least 50% for its order_id.
select *from order_items where  (total_price / order_id)*100 >= 50;

'11. category_name, category_id, stock quantity for each category and sum price of all the units in stock for each category.'
select
categories.category_id,
categories.category_name,
sum(products.stock_quantity) as total_quantity,
sum(products.unit_price * products.stock_quantity) as total_price
FROM
    categories
INNER JOIN
    products ON categories.category_id = products.category_id
GROUP BY
    categories.category_id, categories.category_name;

'12. Ordered list of category_id and category_name and total revenue generated by each category.'
select
categories.category_id,
categories.category_name,
sum(products.unit_price * order_items.quantity) as total_revenue
FROM
    categories
INNER JOIN
    products ON categories.category_id = products.category_id
INNER JOIN
    order_items ON products.product_id = order_items.product_id
GROUP BY
    categories.category_id, categories.category_name
order by
total_revenue desc;